package technical;

public class RatInMaze {
    static int N;

    static void printSolution(int sol[][]) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(" " + sol[i][j] + " ");
            }
            System.out.println();
        }
    }

    static boolean solveMaze(int maze[][]) {
        int sol[][] = new int[N][N];

        if (solveMazeUtil(maze, 0, 0, sol) == false) {
            System.out.print("Solution doesn't exist");
            return false;
        }

        printSolution(sol);
        return true;
    }

    public static boolean solveMazeUtil(int[][] maze, int row, int col, int[][] sol) {
        // Base case: If the rat reaches the destination
        if (row == N - 1 && col == N - 1 && maze[row][col] == 1) {
            sol[row][col] = 1;
            return true;
        }
        
        if (isSafe(maze, row, col)) {
            // Mark the current cell as part of the solution path
            if (sol[row][col] == 1) {
                return false;
            }
            sol[row][col] = 1;

            if (solveMazeUtil(maze, row, col + 1, sol)) {
                return true;
            }

            if (solveMazeUtil(maze, row + 1, col, sol)) {
                return true;
            }

            sol[row][col] = 0;
            return false;
        }
        return false;
    }

    private static boolean isSafe(int[][] maze, int x, int y) {
        // Check if x and y are within the maze bounds and if the cell is not blocked (0)
        return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
    }

    public static void main(String[] args) {
        int maze[][] = { { 1, 0, 0, 0 }, { 1, 1, 0, 1 }, { 0, 1, 0, 0 }, { 1, 1, 1, 1 } };

        N = maze.length;
        solveMaze(maze);
    }
}
